<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core, Version=4.0.0.0, Culture=neutral" #>
<#@ Assembly Name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ import namespace="System.Linq" #>

using System.Linq.Expressions;

namespace X39.Util;
public static partial class TypeExtensionMethods
{
    private static void ClearDynCache()
    {
<#
    for (var i = 1; i < 20; i++)
    {
#>
<#
        if (i >= 7)
        {
#>
#if NET5_0_OR_GREATER || NETSTANDARD2_0 || NETSTANDARD2_1 || NET47 || NET471 || NET472
<#
        }
#>
        CreateInstanceDelegate<#= i #>Cache.Clear();
<#
        if (i >= 7)
        {
#>
#endif
<#
        }
#>
<#
    }
#>
    }
<#
    for (var i = 1; i < 20; i++)
    {
        var argList = string.Join(", ", Enumerable.Range(0, i).Select((q) => string.Concat("TArg", q + 1)));
        var valueList = string.Join(", ", Enumerable.Range(0, i).Select((q) => string.Concat("arg", q + 1)));
        var paramList = string.Join(", ",
            Enumerable.Range(0, i).Select((q) => string.Concat("TArg", q + 1, " arg", q + 1)));
        var typeOfArgList = string.Join(", ",
            Enumerable.Range(0, i).Select((q) => string.Concat("typeof(TArg", q + 1, ")")));
        if (i >= 7)
        {
#>
#if NET5_0_OR_GREATER || NETSTANDARD2_0 || NETSTANDARD2_1 || NET47 || NET471 || NET472
<#
        }
#>

    internal static readonly Dictionary<InstanceCacheKey, Delegate> CreateInstanceDelegate<#= i #>Cache = new(); 
    public static object CreateInstance<<#= argList #>>(this Type t<#= i > 0 ? ", " : string.Empty #><#= paramList #>)
    {
        var key = new InstanceCacheKey(t, new[]{<#= typeOfArgList #>});
        if (CreateInstanceDelegate<#= i #>Cache.TryGetValue(key, out var del))
            return del.DynamicInvoke(<#= valueList #>)
                ?? throw new NullReferenceException("Constructor yielded null result.");
        var constructor = t.GetConstructor(new[] {<#= typeOfArgList #>});
        if (constructor == null)
        {
            var ex = new InvalidOperationException("No matching constructor existing.");
            ex.Data.Add("Target", t);
<#
        for (var j = 1; j <= i; j++)
        {
#>
            ex.Data.Add("<#= $"arg{j}" #>", arg<#= j #>);
<#
        }
#>
            throw ex;
        }
        var expParameters = new Expression[] {
            <#
        for (var j = 1; j <= i; j++)
        {
            Write($"Expression.Parameter(typeof(TArg{j}))");
            Write(j != i ? ",\r\n            " : "\r\n            ");
        }
#>};
        var expNew = Expression.New(constructor, expParameters);
        CreateInstanceDelegate<#= i #>Cache[key] = del = Expression.Lambda(expNew, expParameters.Cast<ParameterExpression>()).Compile();
        var result = del.DynamicInvoke(<#
        for (var j = 1; j <= i; j++)
        {
            Write($"arg{j}");
            Write(j != i ? ",\r\n            " : "\r\n            ");
        }
#>);
        return result
               ?? throw new NullReferenceException("Constructor yielded null result.");
    }
<#
        if (i >= 7)
        {
#>
#endif
<#
        }
    }
#>
}
