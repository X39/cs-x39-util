<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(byte),
        typeof(sbyte),
        typeof(int),
        typeof(uint),
        typeof(short),
        typeof(ushort),
        typeof(long),
        typeof(ulong),
        typeof(float),
        typeof(double),
        typeof(decimal)
    };
#>
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable RedundantNameQualifier
using System.ComponentModel;

namespace X39.Util.Console;

public static partial class AskConsole
{
<#
    foreach (var type in types)
    {
#>
    /// <summary>
    /// Prompts the console user to enter a value of the type <see name="<#= type.FullName #>"/>.
    /// </summary>
    /// <param name="askText">
    /// The text to display when asking.
    /// </param>
    /// <param name="writeAskTextLine">
    /// Whether to output <paramref name="askText"/> using <see cref="ConsoleString.WriteLine"/> (true)
    /// or <see cref="ConsoleString.Write"/> (false).
    /// </param>
    /// <param name="invalidFormatText">
    /// The text to display when <see cref="TypeConverter.IsValid(object?)"/> returns false.
    /// </param>
    /// <param name="cancellationToken">
    /// A <see cref="CancellationToken"/> that can be cancelled to abort the loop.
    /// Will <b>NOT</b> cancel the blocking operation of reading from the console!
    /// </param>
    /// <returns>
    /// The value returned by <see cref="TypeConverter"/> when given the input string
    /// after the input string not being empty and the input string being validly convertible,
    /// confirmed using <see cref="TypeConverter.IsValid(object?)"/>.
    /// </returns>
    /// <exception cref="NotSupportedException">Thrown when no <see cref="TypeConverter"/> is found.</exception>
    public static <#= type.Name #>? For<#= type.Name #>(
        ConsoleString askText,
        bool writeAskTextLine = true,
        ConsoleString invalidFormatText = default,
        CancellationToken cancellationToken = default)
        => ForValue<<#= type.FullName #>>(
            askText,
            writeAskTextLine,
            invalidFormatText,
            cancellationToken);

<#
    }
#>
}